<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>git</title>
      <link href="/f/2021/05/06/git/"/>
      <url>/f/2021/05/06/git/</url>
      
        <content type="html"><![CDATA[<h2 id="—git安装与配置—"><a href="#—git安装与配置—" class="headerlink" title="—git安装与配置—"></a>—git安装与配置—</h2><h2 id="初次运行-Git-前的配置"><a href="#初次运行-Git-前的配置" class="headerlink" title="初次运行 Git 前的配置"></a>初次运行 Git 前的配置</h2><p>既然已经在系统上安装了 Git，你会想要做几件事来定制你的 Git 环境。 每台计算机上只需要配置一次，程序升级时会保留配置信息。 你可以在任何时候再次通过运行命令来修改它们。</p><p>Git 自带一个 <code>git config</code> 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置：</p><ol><li><code>/etc/gitconfig</code> 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果在执行 <code>git config</code> 时带上 <code>--system</code> 选项，那么它就会读写该文件中的配置变量。 （由于它是系统配置文件，因此你需要管理员或超级用户权限来修改它。）</li><li><code>~/.gitconfig</code> 或 <code>~/.config/git/config</code> 文件：只针对当前用户。 你可以传递 <code>--global</code> 选项让 Git 读写此文件，这会对你系统上 <strong>所有</strong> 的仓库生效。</li><li>当前使用仓库的 Git 目录中的 <code>config</code> 文件（即 <code>.git/config</code>）：针对该仓库。 你可以传递 <code>--local</code> 选项让 Git 强制读写此文件，虽然默认情况下用的就是它。。 （当然，你需要进入某个 Git 仓库中才能让该选项生效。）</li></ol><p>每一个级别会覆盖上一级别的配置，所以 <code>.git/config</code> 的配置变量会覆盖 <code>/etc/gitconfig</code> 中的配置变量。</p><p>在 Windows 系统中，Git 会查找 <code>$HOME</code> 目录下（一般情况下是 <code>C:\Users\$USER</code> ）的 <code>.gitconfig</code> 文件。 Git 同样也会寻找 <code>/etc/gitconfig</code> 文件，但只限于 MSys 的根目录下，即安装 Git 时所选的目标位置。 如果你在 Windows 上使用 Git 2.x 以后的版本，那么还有一个系统级的配置文件，Windows XP 上在 <code>C:\Documents and Settings\All Users\Application Data\Git\config</code> ，Windows Vista 及更新的版本在 <code>C:\ProgramData\Git\config</code> 。此文件只能以管理员权限通过 <code>git config -f &lt;file&gt;</code> 来修改。</p><p>你可以通过以下命令查看所有的配置以及它们所在的文件：</p><pre class="line-numbers language-console" data-language="console"><code class="language-console">$ git config --list --show-origin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="用户信息"><a href="#用户信息" class="headerlink" title="用户信息"></a>用户信息</h3><h3 id="设置全局签名"><a href="#设置全局签名" class="headerlink" title="设置全局签名"></a>设置全局签名</h3><pre class="line-numbers language-none"><code class="language-none">git config --global user.name motuogit config --global motuo@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>再次强调，如果使用了 <code>--global</code> 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 <code>--global</code> 选项的命令来配置。</p><p>很多 GUI 工具都会在第一次运行时帮助你配置这些信息。</p><h2 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h2><p>若你使用 Git 时需要获取帮助，有三种等价的方法可以找到 Git 命令的综合手册（manpage）：</p><pre class="line-numbers language-console" data-language="console"><code class="language-console">$ git help &lt;verb&gt;$ git &lt;verb&gt; --help$ man git-&lt;verb&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>例如，要想获得 <code>git config</code> 命令的手册，执行</p><pre class="line-numbers language-console" data-language="console"><code class="language-console">$ git help config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="—–git结构—"><a href="#—–git结构—" class="headerlink" title="—–git结构—-"></a>—–git结构—-</h2><blockquote><p>工作区:working tree/working directory, 电脑中看到的,写代码的目录</p><p>暂存区:staging area,一般在.git目录下的/index文件中,也叫索引index,只是要提交文件的索引</p><p>版本库/本地库Repository:.git目录, 保存项目的元数据和对象数据库的地方. 从其它计算机克隆仓库时，复制的就是这里的数据。</p><ul><li>Git为我们自动创建的第一个分支<code>master</code>，</li><li>指向<code>master</code>的一个指针叫<code>HEAD</code></li></ul></blockquote><h3 id="三种状态"><a href="#三种状态" class="headerlink" title="三种状态"></a>三种状态</h3><p>现在请注意，如果你希望后面的学习更顺利，请记住下面这些关于 Git 的概念。 Git 有三种状态，你的文件可能处于其中之一： <strong>已提交（committed）</strong>、<strong>已修改（modified）</strong> 和 <strong>已暂存（staged）</strong>。</p><ul><li>已修改表示修改了文件，但还没保存到数据库中。(是工作区和版本库之间的比较)</li><li>已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。(存到暂存区)</li><li>已提交表示数据已经安全地保存在本地数据库中。</li></ul><p>这会让我们的 Git 项目拥有三个阶段：工作区、暂存区以及 Git 目录。</p><img src="https://gitee.com/fengylf/pubtypora/raw/master/img/areas.png" alt="工作区、暂存区以及 Git 目录。" style="zoom: 80%;" /><p><img src="https://gitee.com/fengylf/pubtypora/raw/master/img/lifecycle.png" alt="Git 下文件生命周期图。"></p><p><img src="https://gitee.com/fengylf/pubtypora/raw/master/img/bg2015120901.png" alt="img"></p><p>名词:</p><blockquote><ol><li></li></ol></blockquote><img src="https://gitee.com/fengylf/pubtypora/raw/master/img/image-20200709121315494.png" alt="image-20200709121315494" style="zoom:50%;" /><blockquote><p>ssh-keygen -t rsa -C <a href="mailto:&#x66;&#101;&#110;&#x67;&#x79;&#108;&#102;&#64;&#49;&#x36;&#51;&#46;&#x63;&#x6f;&#x6d;">&#x66;&#101;&#110;&#x67;&#x79;&#108;&#102;&#64;&#49;&#x36;&#51;&#46;&#x63;&#x6f;&#x6d;</a></p><p>生成密钥.</p></blockquote><h2 id="git-add"><a href="#git-add" class="headerlink" title="git add"></a>git add</h2><blockquote><p>原理就是将工作区文件的当前指针暂存到暂存区;</p></blockquote><h2 id="git-commit-m-“msg”"><a href="#git-commit-m-“msg”" class="headerlink" title="git commit -m “msg”"></a>git commit -m “msg”</h2><blockquote><p>将暂存区的”文件”保存到本地库; 与当前工作区的状态无关;</p><p>-a       跳过使用暂存区域,直接将工作区中已跟踪的内容自动add, 并保存到本地库;</p></blockquote><h2 id="git-status"><a href="#git-status" class="headerlink" title="git status"></a>git status</h2><pre class="line-numbers language-none"><code class="language-none">$ git status -s M READMEMM RakefileA  lib&#x2F;git.rbM  lib&#x2F;simplegit.rb?? LICENSE.txt新添加的未跟踪文件前面有 ?? 标记; 新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。 输出中有两栏，左栏指明了暂存区的状态，右栏指明了工作区的状态。例如，上面的状态报告显示： README 文件在工作区已修改但尚未暂存，而 lib&#x2F;simplegit.rb 文件已修改且已暂存。 Rakefile 文件已修，暂存后又作了修改，因此该文件的修改中既有已暂存的部分，又有未暂存的部分。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><blockquote><p>查看暂存区和仓库差异: git diff –cached<br>比较的是工作目录中当前文件和暂存区域快照之间的差异:git diff </p></blockquote><h2 id="git-rm-1-txt"><a href="#git-rm-1-txt" class="headerlink" title="git rm  1.txt"></a>git rm  1.txt</h2><blockquote><p>删除工作区文件，并且将这次删除放入暂存区:    git rm [file1] [file2] …</p><p>下一次提交时，该文件就不再纳入版本管理了。 如果要删除之前修改过或已经放到暂存区的文件，则必须使用强制删除选项 <code>-f</code>（译注：即 force 的首字母）。 这是一种安全特性，用于防止误删尚未添加到快照的数据，这样的数据不能被 Git 恢复。</p></blockquote><h2 id="git-rm-–cached-1-txt"><a href="#git-rm-–cached-1-txt" class="headerlink" title="git rm –cached  1.txt"></a>git rm –cached  1.txt</h2><blockquote><p>情况是，我们想把文件从 Git 仓库中删除（亦即从暂存区域移除），但仍然希望保留在当前工作目录中。 换句话说，你想让文件保留在磁盘，但是并不想让 Git 继续跟踪。 当你忘记添加 <code>.gitignore</code> 文件，不小心把一个很大的日志文件或一堆 <code>.a</code> 这样的编译生成文件添加到暂存区时，这一做法尤其有用。 为达到这一目的，使用 <code>--cached</code> 选项：</p></blockquote><h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><pre class="line-numbers language-none"><code class="language-none">查看commit日志, 查看命令历史，以便确定要回到未来的哪个版本:git reflog-p -2:   限制只显示2条记录--stat:看到每次提交的简略统计信息--pretty&#x3D;oneline:  每条记录显示在一行.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="git-reset-file"><a href="#git-reset-file" class="headerlink" title="git reset [file]"></a>git reset [file]</h2><blockquote><p>重置暂存区的指定文件，与上一次commit保持一致，但工作区不变.</p></blockquote><p>版本回退:</p><p>HEAD表示当前版本.</p><pre class="line-numbers language-none"><code class="language-none">git reset --hard HEAD^<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="git-checkout-–-file"><a href="#git-checkout-–-file" class="headerlink" title="git checkout – [file]"></a>git checkout – [file]</h2><pre class="line-numbers language-none"><code class="language-none">撤销修改:(恢复到最近的一次修改,可能是暂存区,也可能是本地库)一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。总之，就是让工作区的这个文件回到最近一次git commit或git add时的状态。git checkout --其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><pre class="line-numbers language-none"><code class="language-none">&gt;  # 列出所有tag&gt;  $ git tag&gt; git tag -l &quot;v1.8.5*&quot;   &#x2F;&#x2F;加匹配&gt;  # 新建一个tag在当前commit&gt;  $ git tag [tagname]&gt;  轻量标签, 不需要加参数&gt;  git tag -a v1.4 -m &quot;my version 1.4&quot;     &#x2F;&#x2F;为标签指定注释&gt;  # 新建一个tag在指定的某个commit&gt;  $ git tag [tag] [commit]&gt;  # 删除本地tag, 远程没有删除&gt;  $ git tag -d [tag]&gt;  &gt;  # 删除远程tag&gt;  $ git push origin :refs&#x2F;tags&#x2F;[tagName]&gt;  或者: git push origin --delete &lt;tagname&gt;&gt;  # 查看tag信息&gt;  $ git show [tag]&gt;  &gt;  # 提交指定tag&gt;  $ git push [remote] [tag]&gt;  &gt;  # 提交所有tag&gt;  $ git push [remote] --tags&gt;  &gt;  # 新建一个分支，指向某个tag&gt;  $ git checkout -b [branch] [tag]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h1><h2 id="git-branch"><a href="#git-branch" class="headerlink" title="git branch"></a>git branch</h2><pre class="line-numbers language-none"><code class="language-none">Git鼓励大量使用分支查看分支：git branch创建分支：git branch &lt;name&gt;切换分支：git checkout &lt;name&gt;或者git switch &lt;name&gt;创建+切换分支：git checkout -b &lt;name&gt;或者git switch -c &lt;name&gt;合并某分支到当前分支：git merge &lt;name&gt;删除分支：git branch -d &lt;name&gt;简要信息查看全部分支loggit log --oneline --decorate --graph --all<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>分支切换会改变你工作目录中的文件</code></p><p>在切换分支时，一定要注意你工作目录里的文件会被改变。 如果是切换到一个较旧的分支，你的工作目录会恢复到该分支最后一次提交时的样子。 如果 Git 不能干净利落地完成这个任务，它将禁止切换分支。</p></blockquote><p>首先，我们创建<code>dev</code>分支，然后切换到<code>dev</code>分支：</p><pre class="line-numbers language-none"><code class="language-none">$ git checkout -b devSwitched to a new branch &#39;dev&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p><pre class="line-numbers language-none"><code class="language-none">$ git branch dev切换分支$ git checkout devSwitched to branch &#39;dev&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后，用<code>git branch</code>命令查看当前分支：</p><pre class="line-numbers language-none"><code class="language-none">$ git branch* dev  master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>合并分支(当前在master):我们把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p><pre class="line-numbers language-none"><code class="language-none">$ git merge dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h1><h2 id="git-remote-v"><a href="#git-remote-v" class="headerlink" title="git remote -v"></a>git remote -v</h2><blockquote><p>查看远程仓库信息.</p><p>指定选项 <code>-v</code>，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。</p></blockquote><h2 id="git-remote-add-shortname-url"><a href="#git-remote-add-shortname-url" class="headerlink" title="git remote add [shortname] [url]"></a>git remote add [shortname] [url]</h2><pre class="line-numbers language-none"><code class="language-none">添加远程仓库:git remote add origin git@github.com:michaelliao&#x2F;learngit.git程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="git-fetch-remote"><a href="#git-fetch-remote" class="headerlink" title="git fetch [remote]"></a>git fetch [remote]</h2><blockquote><p>下载远程仓库的所有变动;</p><p>从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</p><p>必须注意 <code>git fetch</code> 命令只会将数据下载到你的本地仓库——它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。</p></blockquote><h2 id="git-push-remote-branch"><a href="#git-push-remote-branch" class="headerlink" title="git push [remote] [branch]"></a>git push [remote] [branch]</h2><pre class="line-numbers language-none"><code class="language-none">git push -u origin master用git push命令，实际上是把当前分支master推送到远程。由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="git-remote-show-remote"><a href="#git-remote-show-remote" class="headerlink" title="git remote show [remote]"></a>git remote show [remote]</h2><pre class="line-numbers language-none"><code class="language-none">显示某个远程仓库的信息;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>git remote rename oldname newname:      修改远程仓库别名</p><h2 id="git-remote-rm-remote"><a href="#git-remote-rm-remote" class="headerlink" title="git remote rm [remote]"></a>git remote rm [remote]</h2><pre class="line-numbers language-none"><code class="language-none">git remote rm origin如果添加的时候地址写错了，或者就是想删除远程库，可以用&#96;git remote rm &lt;name&gt;&#96;命令。使用前，建议先用&#96;git remote -v&#96;查看远程库信息：此处的“删除”其实是解除了本地和远程的绑定关系，并不是物理上删除了远程库。远程库本身并没有任何改动。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
